<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，作用就是对sql进行分类化管理 -->
<!-- 使用mapper 代理方法开发，namespace有特殊重要的作用，表示代理对象接口的全类名 -->
<mapper namespace="mybatis_01.mybatis.com.ztx.mapper.UserMapper">
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过id查询用户表的记录 -->
	<!-- 通过select 执行数据库查询
		id：标识映射文件中的sql
		将sql语句封装到mapperStatement 对象中，所以将id称为statement的id
		parameterType:指定输入参数的类型，这里指定int型
		#{}表示占位符，
		#{id} 其中的id表示接收输入的参数，参数名称就是id，如果输入参数就是简单类型，#{}中间的参数名可以任意，可以使用value或其他名称
		
		resultType 指定sql输出结果的所映射的java对象类型，select 指定resultType 表示将单条记录映射成java对象
	 -->
	<select id="findUserById" parameterType="int" resultType="mybatis_01.mybatis.com.ztx.po.User">
		select * from user where id = #{id}
	</select>
	
	<!-- 
		根据用户名称模拟查询用户信息，可能返回多条记录
		
		${}: 表示拼接sql串，将接收到参数的内容不加任何修饰的传入sql中
		使用${}会引起sql注入
		${value} 接收出入参数的内容，如果传入的类型是简单类型，${}只能使用value(并非 VALUE)
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="mybatis_01.mybatis.com.ztx.po.User">
	    SELECT * FROM user WHERE username LIKE "%${value}%"
	</select>
	
	
	<!-- 
		添加用户
		parameterType : 指定输入类型是pojo
		#{} 中指定pojo的属性名，接收pojo对象的属性值，mybatis通过OGNL获取对象的属性值，
	 -->
	<insert id="insertUser" parameterType="mybatis_01.mybatis.com.ztx.po.User">
	    
	    <!-- 自增主键返回 -->
		<!-- 
			将插入数据的主键返回，返回到user对象中 
			SELECT LAST_INSERT_ID() : 得到刚插入进去记录的主键值，只适用于自增主键
			
			keyProperty : 将查询到主键值设置到parametType 指定的对象的那个属性
			order : SELECT LAST_INSERT_ID() 的执行顺序，相对与insert语句的执行顺序来说的
			resultType : 指定 SELECT LAST_INSERT_ID()的结果类型 
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		
		<!-- 非自增主键的返回 -->
		<!-- 使用mysql 的uuid 生成主键，（id 应该为字符型（35位））
			执行过程 ： 
			首先通过uuid 的到主键，将主键设置到user 对象中的id 属性中，
			其次在 insert 执行时，从 user 对象中取出id 属性值
		 -->
		<!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.String"> -->
		<!-- 	SELECT uuid() -->
		<!-- </selectKey> -->
		 
	   	insert into user (username, birthday, sex, address) value(#{username},#{birthday},#{sex},#{address});
	</insert>
	
	<!-- 
		删除用户
		根据id删除用户
	 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 
		根据用户的id更新用户
		需要传入用户的id
		需要传入用户更新信息
		parameterType ： 指定user 对象，包括id和更新信息，注意id必须存在，防止全部更新
		#{id}表示传入user对象中获取id的属性值
	 -->
	 <update id="updateUser" parameterType="mybatis_01.mybatis.com.ztx.po.User">
		update user set username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} where id = #{id}     
	 </update>
	 
</mapper>
