<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，作用就是对sql进行分类化管理 -->
<!-- 使用mapper 代理方法开发，namespace有特殊重要的作用 -->
<mapper namespace="test">
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过id查询用户表的记录 -->
	<!-- 通过select 执行数据库查询
		id：标识映射文件中的sql
		将sql语句封装到mapperStatement 对象中，所以将id称为statement的id
		parameterType:指定输入参数的类型，这里指定int型
		#{}表示占位符，
		#{id} 其中的id表示接收输入的参数，参数名称就是id，如果输入参数就是简单类型，#{}中间的参数名可以任意，可以使用value或其他名称
		
		resultType 指定sql输出结果的所映射的java对象类型，select 指定resultType 表示将单条记录映射成java对象
	 -->
	<select id="findUserById" parameterType="int" resultType="mybatis_01.mybatis.com.ztx.po.User">
		select * from user where id = #{id}
	</select>
	
	<!-- 
		根据用户名称模拟查询用户信息，可能返回多条记录
		
		${}: 表示拼接sql串，将接收到参数的内容不加任何修饰的传入sql中
		使用${}会引起sql注入
		${value} 接收出入参数的内容，如果传入的类型是简单类型，${}只能使用value(并非 VALUE)
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="mybatis_01.mybatis.com.ztx.po.User">
	    SELECT * FROM user WHERE username LIKE "%${value}%"
	</select>
	
	
</mapper>
